# Based on code from this tutorial: https://www.oracle.com/database/technologies/appdev/python/quickstartpython.html#windows-tab 

import getpass
import oracledb
from datetime import datetime



def get_connection(pw_input):
    try:
        connection = oracledb.connect(
            user="admin",
            password=pw_input,
            dsn="(description= (retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1521)(host=adb.sa-saopaulo-1.oraclecloud.com))(connect_data=(service_name=g9cbe43342b5bda_dataengineeringdatabase_high.adb.oraclecloud.com))(security=(ssl_server_dn_match=yes)))")  # the connection string copied from the cloud console

        print("Successfully connected to Oracle Database")
        return connection
    except Exception as e:
        print("Error: {0}".format(e))

# Create a table
def create_tables(connection):
    with connection.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE COINS(
                ID VARCHAR2(100),
                NAME VARCHAR2(100),
                IMAGE VARCHAR2(200),
                CREATION_DATE TIMESTAMP,
                UPDATED_DATE  TIMESTAMP,
                PRIMARY KEY(id)
            );""")
    with connection.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE QUOTES(
                ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
                HISTORICAL_DATE DATE,
                CRYPTO_ID VARCHAR2(100),
                OPEN_VALUE NUMBER,
                CLOSE_VALUE NUMBER,
                HIGH_VALUE NUMBER,
                LOW_VALUE NUMBER,
                VOLUME NUMBER,
                MARKET_CAP NUMBER,
                CREATION_DATE TIMESTAMP,
                UPDATED_DATE TIMESTAMP,
                PRIMARY KEY(id),
                FOREIGN KEY(CRYPTO_ID) REFERENCES COINS(ID)
            );""")

    print("Tables created")


# Insert coin into db
def insertCoinDb(connection, coin_id, name, symbol, image):
    print('Inserting database into table COINS...')
    with connection.cursor() as cursor:
        cursor.execute("UPDATE COINS SET NAME = :1, IMAGE = :2, UPDATED_DATE = :3 WHERE ID = :4", [name, image, datetime.now(), coin_id])
        print(str(cursor.rowcount) + " rows updated into COINS table")
        if (cursor.rowcount == 0):
            cursor.execute("INSERT into COINS (ID, NAME, IMAGE, CREATION_DATE) VALUES(:1, :2, :3, :4)", [coin_id, name, image, datetime.now()])
            print(str(cursor.rowcount) + " rows inserted into COINS table")

# Insert quote into db
def insertQuoteDb(connection, date, coin_id, open, close, high, low, volume, marketCap):
    print('Inserting database into table QUOTES...')
    with connection.cursor() as cursor:
        cursor.execute("UPDATE QUOTES SET OPEN_VALUE = :1, CLOSE_VALUE = :2, HIGH_VALUE = :3, LOW_VALUE = :4, VOLUME = :5, MARKET_CAP = :6, CREATION_DATE = :7 WHERE HISTORICAL_DATE = TO_DATE(:8, 'YYYY-MM-DD') AND CRYPTO_ID = :9", [open, close, high, low, volume, marketCap, datetime.now(), date, coin_id])
        print(str(cursor.rowcount) + " rows updated into QUOTES table")
        if (cursor.rowcount == 0):
            cursor.execute("INSERT into QUOTES (HISTORICAL_DATE, CRYPTO_ID, OPEN_VALUE, CLOSE_VALUE, HIGH_VALUE, LOW_VALUE, VOLUME, MARKET_CAP, CREATION_DATE) VALUES(TO_DATE(:1, 'YYYY-MM-DD'), :2, :3, :4, :5, :6, :7, :8, :9)", [date, coin_id, open, close, high, low, volume, marketCap, datetime.now()])
            print(str(cursor.rowcount) + " rows inserted into QUOTES table")


# Save Image in Database
def saveImageUrlDb(connection, info):
    print('Inserting database into table COINS...')
    for u in info:
        with connection.cursor() as cursor:
            cursor.execute("UPDATE COINS SET IMAGE = :1, UPDATED_DATE = :2 WHERE ID = :3", [info[u][0]['logo'], datetime.now(), info[u][0]['symbol']])
            print(str(cursor.rowcount) + " rows updated into COINS table")


def getDatabaseQuotes(connection, query="SELECT * FROM QUOTES"):
    results = []
    with connection.cursor() as cursor:
        cursor.execute(query)
        results = cursor.fetchall()
            
    return results


if __name__=='__main__':
    password = getpass.getpass("Enter database password: ")
    connection = get_connection(password)
    create_tables()